@testset "MC: IsingModel Simulation" begin
    Random.seed!(123)
    m = IsingModel(dims=2, L=8);
    mc = MC(m, beta=0.35);
    run!(mc, sweeps=1000, thermalization=10, verbose=false);

    # Check measurements
    measured = measurements(mc)
    @test   25.47  ≈ measured[:Magn].M |> mean         atol=0.01
    @test    0.82  ≈ measured[:Magn].M |> std_error    atol=0.01
    @test  887.    ≈ measured[:Magn].M2 |> mean        atol=1.0
    @test   46.    ≈ measured[:Magn].M2 |> std_error   atol=1.0
    @test    0.398 ≈ measured[:Magn].m |> mean         atol=0.001
    @test    0.013 ≈ measured[:Magn].m |> std_error    atol=0.001
    @test    1.300 ≈ measured[:Magn].chi |> mean       atol=0.001

    @test  -59.10  ≈ measured[:Energy].E |> mean       atol=0.01
    @test    0.88  ≈ measured[:Energy].E |> std_error  atol=0.01
    @test 3799.    ≈ measured[:Energy].E2 |> mean      atol=1.0
    @test  111.    ≈ measured[:Energy].E2 |> std_error atol=1.0
    @test   -0.924 ≈ measured[:Energy].e |> mean       atol=0.001
    @test    0.014 ≈ measured[:Energy].e |> std_error  atol=0.001
    @test    0.585 ≈ measured[:Energy].C |> mean       atol=0.001

    @test isempty(mc.configs) == true
end


@testset "DQMC: attractive HubbardModel Simulation" begin
    Random.seed!(123)
    m = HubbardModelAttractive(dims=2, L=4);
    N = 4*4
    mc = DQMC(m, beta=1.0);
    mask = DistanceMask(lattice(m))
    MonteCarlo.unsafe_push!(mc, :CDC => ChargeDensityCorrelationMeasurement(mc, m, mask=mask))
    MonteCarlo.unsafe_push!(mc, :SDC => SpinDensityCorrelationMeasurement(mc, m, mask=mask))
    MonteCarlo.unsafe_push!(mc, :PC => PairingCorrelationMeasurement(mc, m, directions=5))
    run!(mc, sweeps=1000, thermalization=10, verbose=false);

    # Check measurements

    # Greens

    measured = measurements(mc)
    @test [
        0.477228 -0.148092 0.000650671 -0.152739 -0.156428 0.0050096 0.0343558 0.00164354 0.000686254 0.0314209 -0.00315709 0.0363441 -0.149735 9.70741e-5 0.0335553 0.00358477; -0.153774 0.454577 -0.160642 0.000648542 0.0126497 -0.159687 0.00669076 0.0333576 0.037061 0.00569243 0.0358175 -0.00404491 0.00355269 -0.16096 0.0045801 0.0340806; 0.00137329 -0.149875 0.525756 -0.156449 0.0352624 0.000278655 -0.152092 -0.00291045 0.000989166 0.0322977 -0.00177604 0.0358907 0.0322688 -0.00133419 -0.151118 0.00029095; -0.145036 0.000208847 -0.148504 0.520469 0.00232344 0.0322997 -0.00403395 -0.141013 0.0340725 -0.00152847 0.0315167 -0.0043278 -0.0022816 0.032141 -0.00106526 -0.149073; -0.153225 0.0116195 0.0344808 0.00197823 0.459859 -0.154248 0.00721501 -0.148024 -0.157576 0.00551732 0.0349254 0.00233362 0.00219748 0.0371333 -0.00627411 0.03385; 0.00507538 -0.151558 -0.000391151 0.0329975 -0.155022 0.479573 -0.150905 0.00226697 0.00295499 -0.148607 0.00301816 0.0347823 0.0315428 0.00392446 0.0326532 -0.00249034; 0.0351943 0.00306724 -0.159841 -0.00715043 0.00575413 -0.155764 0.491007 -0.148957 0.0353336 0.00576441 -0.153046 -0.00141562 -0.000898893 0.0362212 0.00138285 0.0337357; 0.00118721 0.0348373 -0.00172386 -0.166127 -0.168602 0.000460718 -0.16182 0.508259 -0.000832228 0.036381 0.000702338 -0.165049 0.0363685 0.000530091 0.0375223 3.16583e-7; -0.000531546 0.031598 0.000765815 0.0349322 -0.150373 0.00357689 0.032698 -0.00108294 0.507991 -0.14935 0.00185427 -0.154108 -0.147832 -0.00104978 0.032203 -0.000816359; 0.0354625 0.00767388 0.0356703 0.000856574 0.00576076 -0.152291 0.0023841 0.0328979 -0.157559 0.475779 -0.156894 -0.00115001 -0.00177241 -0.158056 0.00557598 0.0338655; -0.00215687 0.0327828 -0.00226684 0.0351669 0.0352777 0.00517752 -0.149678 -0.000851672 0.00202061 -0.151299 0.480858 -0.157663 0.0346624 6.83759e-5 -0.155145 0.000856897; 0.0346939 -0.00253293 0.0333441 -0.00604537 -0.000972427 0.034324 -0.000290598 -0.147195 -0.160874 -0.00191725 -0.157674 0.52118 -0.00359494 0.0360121 0.00140374 -0.153626; -0.156798 0.00415648 0.0344931 -0.00219987 0.00366139 0.0365817 -0.00100057 0.0324253 -0.163216 -0.00268529 0.0365863 -0.00464487 0.526158 -0.162021 0.00374309 -0.151599; -0.000494114 -0.148824 -0.00554303 0.0321295 0.0336398 0.00246292 0.0314112 -0.00022372 -0.00163466 -0.149309 0.00169644 0.0332757 -0.149364 0.494472 -0.146979 -0.001565; 0.0343884 0.00516688 -0.153669 -0.00249342 -0.00596883 0.0360426 0.00222142 0.0311754 0.0350533 0.00385871 -0.154668 0.00290686 4.46472e-5 -0.155343 0.498268 -0.146554; 0.00117938 0.0336081 0.000884403 -0.159131 0.0366746 -0.00326657 0.0348769 0.00402202 -0.00051693 0.0347719 0.00395268 -0.160173 -0.154205 0.000746075 -0.154492 0.47354
    ] ≈ measured[:Greens].obs |> mean           atol=0.0001
    @test [
        0.0205191 0.00466986 0.00319713 0.00433101 0.0063448 0.00298264 0.00188447 0.00270596 0.00279388 0.00147149 0.00223948 0.00191749 0.00544694 0.0034801 0.00166324 0.00279062; 0.00581179 0.0173809 0.00615989 0.00298333 0.00264239 0.00544051 0.00288374 0.00180361 0.00208151 0.00286832 0.0019582 0.0017646 0.00267498 0.00597742 0.00256961 0.00180452; 0.00304324 0.00535371 0.0171345 0.00603167 0.00188977 0.00215002 0.00496448 0.00224604 0.0019083 0.00161783 0.00226727 0.00188134 0.00147511 0.00266665 0.00549195 0.00243711; 0.00409947 0.00231981 0.00510606 0.0172372 0.00209903 0.00155016 0.00232761 0.00370052 0.0018203 0.00180111 0.00127228 0.00238768 0.00236927 0.00137936 0.00228196 0.00505507; 0.0059045 0.0025362 0.00187802 0.00270614 0.0191752 0.00584846 0.00234163 0.00566209 0.00677845 0.00217692 0.001687 0.00235139 0.00203264 0.00186346 0.00162346 0.00230803; 0.00271169 0.00545808 0.00263302 0.0016385 0.00582896 0.0177921 0.00586849 0.00208916 0.00277508 0.00461105 0.00264704 0.00144147 0.00176448 0.00242271 0.0019095 0.00155428; 0.00196409 0.00206585 0.00588655 0.00288169 0.00244775 0.00538384 0.0147285 0.00616923 0.00185163 0.00234098 0.00470289 0.00209398 0.00170172 0.00177406 0.00201058 0.00195253; 0.00291793 0.00171317 0.00288986 0.00509084 0.00732493 0.00205185 0.00623073 0.0158797 0.00265401 0.00204915 0.00334973 0.00524786 0.00180304 0.00206516 0.00213687 0.00277024; 0.00228005 0.00158917 0.00184363 0.00168331 0.00600594 0.0023704 0.00159086 0.00215774 0.0179357 0.00458805 0.00265191 0.0057394 0.0048724 0.00230553 0.00160043 0.00256597; 0.00188113 0.00260856 0.00165067 0.00188637 0.00246927 0.00535851 0.00277197 0.00174793 0.00452975 0.0186795 0.00587128 0.00293908 0.00256491 0.00550431 0.00254789 0.00182041; 0.00199224 0.00198167 0.00239671 0.00148865 0.0019963 0.00225782 0.0048999 0.00253693 0.00227267 0.00495478 0.0167915 0.00544362 0.00193831 0.00261395 0.00605124 0.00213894; 0.00201428 0.00189837 0.00177325 0.00217569 0.00219486 0.00157229 0.00262323 0.00533245 0.00639645 0.00236338 0.00582814 0.0141972 0.00214637 0.00170952 0.00242774 0.00652343; 0.00551784 0.00314772 0.0018408 0.00244508 0.00239146 0.00211826 0.00165435 0.00167652 0.00526101 0.00247197 0.00198295 0.00232103 0.0166794 0.00479359 0.00235695 0.0051415; 0.00299558 0.00716651 0.00302339 0.00157788 0.00177353 0.00249744 0.00176033 0.00164171 0.00242951 0.00543594 0.00212568 0.00147208 0.00535451 0.0167751 0.00525319 0.00226052; 0.00194073 0.0021867 0.00667736 0.00247544 0.00198623 0.00230368 0.00222494 0.00156614 0.00178054 0.00234639 0.00585425 0.00259014 0.00238915 0.00565968 0.0169088 0.00539021; 0.00288388 0.00177993 0.00292207 0.00446213 0.00215593 0.00206059 0.00171043 0.00265896 0.00261172 0.00179292 0.00246213 0.00612522 0.00551238 0.00288897 0.00570215 0.0156827
    ] ≈ measured[:Greens].obs |> std_error      atol=0.0001

    # Boson Energy

    @test  0.784 ≈ measured[:BosonEnergy].obs |> mean           atol=0.001
    @test  0.430 ≈ measured[:BosonEnergy].obs |> std_error      atol=0.001

    # Configurations :conf

    @test [
        0.16 -0.06 0.1 0.04 0.16 -0.1 -0.06 0.16 0.04 0.0; -0.04 0.1 0.14 0.16 0.22 0.32 0.06 0.12 0.06 -2.22045e-18; -0.16 0.14 -0.1 -0.02 0.02 0.1 -0.22 -0.16 -0.04 -0.08; 0.04 -0.06 -0.08 -0.06 -0.08 -0.16 -0.08 -0.1 -0.04 0.06; 0.1 0.12 0.14 0.18 0.14 0.08 -2.22045e-18 0.18 -0.02 0.04; 0.22 0.04 0.22 -0.16 0.04 -0.08 -0.04 0.06 0.12 9.99201e-18; -0.08 0.06 0.16 0.08 0.04 -0.06 -0.08 0.18 0.0 -0.04; -0.2 0.04 0.0 0.06 -0.06 0.04 -2.10942e-17 -0.06 0.18 -0.16; -0.1 0.06 0.1 -0.12 -0.08 0.08 -8.88178e-18 -0.12 -0.08 0.1; 0.16 -0.04 0.06 -0.02 -0.1 0.1 0.16 -0.06 0.16 0.04; 0.08 0.1 -0.12 0.06 -0.06 0.2 0.06 -0.06 0.04 0.04; 0.08 -0.2 -0.04 -0.02 -0.12 -0.08 -0.1 0.14 -0.14 -0.02; -0.06 -0.1 -0.02 0.06 -0.08 -0.08 -0.02 0.1 -0.14 -0.16; 0.1 -0.08 -0.08 0.12 0.04 -0.02 -0.22 0.08 -0.06 0.12; -0.16 0.04 0.16 0.12 0.08 0.1 0.22 -0.16 -0.12 -0.02; -2.22045e-18 0.06 0.02 0.04 0.1 0.06 0.22 0.16 -0.06 -0.02
        ] ≈ [MonteCarlo.decompress(mc, m, c) for c in mc.configs] |> mean                    atol=0.01
    @test MonteCarlo.decompress(mc, m, mc.configs[end]) == mc.conf

    # Charge Density Correlation

    @test [
        1.5849456448588939 0.9701001185866102 1.0244814820688672 1.022266129934798; 0.9697846981453444 1.0275337295377804 1.026623185263297 1.0223883386970969; 0.9701001185866102 1.0293074250579948 1.0293074250579948 1.0223883386970969; 0.9697846981453444 1.026623185263297 1.0222661299347977 1.0303491969344496
    ][:] ≈ mean(measured[:CDC])
    @test [
        0.014339182796261328 0.015103839236855635 0.014881366201547199 0.014852492590291122; 0.01466075859047431 0.0146316314779252 0.015350965765936066 0.015454398305087881; 0.015103839236855635 0.013429158101512143 0.013429158101512805 0.015454398305088025; 0.014660758590474386 0.0153509657659365 0.014852492590291273 0.014691107761383475
    ][:] ≈ std_error(measured[:CDC])

    # Spin density correlations (x, y, z)

    @test [
        0.4413107278403039 -0.043536617096963874 -0.0009168475990912314 -0.002016368338663856; -0.04345933389844916 -0.0009282194533560656 -0.0009516994871196575 -0.0020119947928066984; -0.043536617096963874 -0.0009264768513716855 -0.0009264768513716858 -0.002011994792806698; -0.04345933389844915 -0.0009516994871196575 -0.002016368338663856 -0.0005286346557753946
    ][:] ≈ mean(measured[:SDC].x)
    @test [
        0.0016150660150651 0.00023159307395462136 5.630998807076127e-5 2.734317071034562e-5; 0.00026936524556120796 5.410748862202873e-5 3.4723053809401575e-5 2.429688372763204e-5; 0.00023159307395462136 2.793103304288827e-5 2.7931033042888085e-5 2.429688372763204e-5; 0.00026936524556119993 3.4723053809401575e-5 2.7343170710346242e-5 3.227352872694644e-5
    ][:] ≈ std_error(measured[:SDC].x)
    @test [
        0.4413107278403039 -0.043536617096963874 -0.0009168475990912314 -0.002016368338663856; -0.04345933389844916 -0.0009282194533560656 -0.0009516994871196575 -0.0020119947928066984; -0.043536617096963874 -0.0009264768513716855 -0.0009264768513716858 -0.002011994792806698; -0.04345933389844915 -0.0009516994871196575 -0.002016368338663856 -0.0005286346557753946
    ][:] ≈ mean(measured[:SDC].y)
    @test [
        0.0016150660150651 0.00023159307395462136 5.630998807076127e-5 2.734317071034562e-5; 0.00026936524556120796 5.410748862202873e-5 3.4723053809401575e-5 2.429688372763204e-5; 0.00023159307395462136 2.793103304288827e-5 2.7931033042888085e-5 2.429688372763204e-5; 0.00026936524556119993 3.4723053809401575e-5 2.7343170710346242e-5 3.227352872694644e-5
    ][:] ≈ std_error(measured[:SDC].y)
    @test [
        0.4413107278403039 -0.043536617096963874 -0.0009168475990912304 -0.002016368338663856; -0.04345933389844916 -0.0009282194533560664 -0.0009516994871196569 -0.0020119947928066966; -0.043536617096963874 -0.0009264768513716854 -0.0009264768513716854 -0.002011994792806697; -0.04345933389844915 -0.0009516994871196569 -0.0020163683386638562 -0.0005286346557753948
    ][:] ≈ mean(measured[:SDC].z)
    @test [
        0.0016150660150651 0.00023159307395463074 5.6309988070761405e-5 2.734317071034562e-5; 0.00026936524556119993 5.410748862202873e-5 3.4723053809401765e-5 2.429688372763239e-5; 0.0002315930739546401 2.793103304288835e-5 2.793103304288846e-5 2.4296883727631342e-5; 0.00026936524556119993 3.472305380940155e-5 2.734317071034562e-5 3.2273528726946354e-5
    ][:] ≈ std_error(measured[:SDC].z)

    # Pairing Correlations
    @test [
        0.2727805429050486, 0.026964493933329878, 0.026790941131624616, 0.02633712612106764, 0.026969083738455243, 0.0006320242161440317, 0.0006561419192005807, 0.0006570337023046393, 0.0006178359014809729, 0.0006609000934640173, 0.0006428311178390576, 0.0014882300705944668, 0.0014446470271584526, 0.0015079183260493264, 0.0015074587946490065, 0.0003566089274243252, -0.07553732477170805, -0.07611209039794552, -0.0002333277440419586, -0.00021400509066990284, -0.0002817990794019337, -0.0002997699400087695, -0.00011600792409017664, -0.00014203815612834475, 2.6507087735957983e-5, 6.0163333963102174e-5, 6.007383027927479e-5, 2.9967876662283297e-5, 1.1758766989746964e-5, 5.0713797267817656e-5, -6.517061211806049e-5, -8.046547666637255e-5, -0.07610835824337636, -0.00010471317055713019, -0.07608337489699553, -0.00026622263136639513, -0.00022746595119370902, 4.371769935705156e-5, -0.000169815224298373, 3.974797704913946e-5, -0.00022967173885776772, -0.0003372866454464737, 6.642303611737627e-5, 4.5383542039787826e-5, -5.923131665335746e-5, 2.3656937838969565e-5, 4.444097666777301e-5, -7.108214222841379e-5, -0.07611209039794552, -0.0002997699400087696, -0.0001160079240901767, -0.07553732477170805, -0.00014203815612834464, -0.00021400509066990276, 2.99678766622833e-5, 1.1758766989746956e-5, 5.0713797267817677e-5, -0.00023332774404195855, -0.0002817990794019337, 6.0163333963102195e-5, 6.007383027927479e-5, -8.046547666637255e-5, 2.6507087735957983e-5, -6.517061211806046e-5, -0.07608337489699551, -0.00016981522429837303, -0.00022967173885776772, -0.00033728664544647384, -0.07610835824337636, 4.5383542039787826e-5, 2.365693783896958e-5, -0.0001047131705571303, -0.0002274659511937091, 4.444097666777301e-5, -0.00026622263136639513, -7.108214222841379e-5, 4.371769935705156e-5, 3.974797704913946e-5, 6.642303611737627e-5, -5.923131665335745e-5, -0.07661598335181391, -0.00018127142263777582, -0.00013642035508120595, -0.07584512624317423, -0.00010309746840475465, -0.00018925928159589187, 2.313009833159411e-5, 1.0793589519925695e-5, 1.8775024530815526e-5, -0.0001600958037787457, -0.00025013252051177336, 6.546496571828175e-5, 5.6698360955658285e-5, -8.382937912357192e-5, 3.648961038281587e-5, -6.817874577510467e-5, 0.2401828216613494, 0.022741838399218298, 0.02396021849301544, 0.022618149592867485, 0.024092177319145484, 0.00021870173726336182, 3.759636070261754e-5, 4.473430141232489e-5, -8.361117782900048e-5, 5.4590940296975486e-5, 5.545558672214232e-5, 0.0011158346840690573, 0.0011095711310929218, 0.001159750714117626, 0.0011587258402532905, 5.3634888786043835e-5, -0.0007113497937424724, -0.005172075894508485, 0.02277219011058671, 0.022794666668499105, -0.005216077834546224, 5.270451491131155e-5, 3.5773832402381816e-5, 2.9086364422307354e-6, 4.01317171112826e-5, -0.00021137512842792447, 5.017905066831219e-5, -0.00520617512392482, 0.00114712713342918, 0.0011558211413734518, -0.005218538197444662, 1.073669691623667e-5, -0.000318040519114122, 0.023814018977661146, -0.005237573750382937, 0.02172966694922459, -0.00521425788235804, -0.0004068260953172442, -0.00011571665032061919, -7.482830212704229e-5, -1.023007758915121e-5, 0.00022042200977997833, 0.00018738548152383012, -0.005237279387469294, -0.005245491441120012, 0.0012247230469622826, 0.001098751326336116, -4.579086848516521e-6, -0.0003710185828856445, -0.005231700673863311, -0.005202024072064773, 0.022703921004980407, 0.0227602141028982, 5.741454443926302e-5, 1.0345155493978816e-5, 5.9022959166777645e-5, 4.126509745624133e-5, 3.004908847278788e-5, -0.00020169520057662635, 0.0011587343139240936, -0.005176157089838655, 0.0011519228910391289, -0.005209476408990865, -1.5159557276861766e-5, -0.07647671978855558, -0.000142148853894656, -0.00014534781056151568, -0.00026906768764883106, -0.07621850758784611, 3.208218505336163e-5, 1.893054394953279e-5, -6.8371041949594985e-6, -0.00014151769706298795, 4.359203756489939e-5, -0.00023023921656427853, -7.403020585297099e-5, 6.706482251716676e-5, 1.3368124626667291e-5, 5.074882478504862e-5, -6.0319786435735825e-5, -0.0004030175729666127, 0.022715378338927863, -0.005184433074316677, -0.005206815860780704, 0.02270106754249988, 4.0406992981411214e-5, 4.3025177495785474e-5, -0.0005211764506997532, 4.1743847313828025e-5, 1.3990050140098892e-5, 5.798459758075297e-5, 0.0011664179609191657, -0.005219411383104591, -0.005202343814910685, 0.0011590407649374266, 3.6036938981178045e-6, 0.24028099757129465, 0.023960857510588695, 0.022634729654340557, 0.023748119807978422, 0.022641325318030106, -0.0001078034960939004, 3.962305566965425e-5, 4.519247239555658e-5, 0.00017888870517673416, 3.8319933254137114e-5, 4.717621057086876e-5, 0.0011547357301565828, 0.0011418050869375252, 0.0011068889117898718, 0.001099848005124057, 4.061122394643272e-5, -0.0006021230654709083, -0.00522643028576751, -0.0052203443861177055, 0.022646191999433234, 0.022743876091154185, 4.294917704514901e-5, 8.251347722928545e-6, 3.246763930125802e-5, 4.5247776743903804e-5, 4.161470953077641e-5, -0.00024126552071525732, 0.001163504076910439, -0.005204902661015349, 0.0011531814319120225, -0.00520696280985988, -5.3179863755467775e-6, -0.0002675964930853623, -0.005231073080911952, 0.023684702501313142, -0.0051994367028900665, 0.02176830854848195, 1.5098073335808262e-5, -9.146606812927617e-5, 0.00019687664564830478, -0.0002831599192184228, -0.00010352501305960557, 0.00020281047821541168, 0.0012004923062478169, 0.0011062920416299654, -0.005211461083401955, -0.0051950318119055325, 7.335506210252229e-6, -0.07584512624317423, -0.07661598335181391, -0.0001600958037787457, -0.00018925928159589187, -0.00025013252051177336, -0.00018127142263777582, -0.00013642035508120595, -0.00010309746840475465, 3.648961038281587e-5, 6.546496571828175e-5, 5.6698360955658285e-5, 2.313009833159411e-5, 1.0793589519925695e-5, 1.8775024530815526e-5, -6.817874577510467e-5, -8.382937912357192e-5, -0.0004068260953172441, 0.02172966694922459, -0.0052372793874692946, 0.023814018977661153, -0.005245491441120012, -0.00031804051911412187, 0.00022042200977997833, 0.00018738548152383012, -4.5790868485165246e-6, -0.00011571665032061919, -7.482830212704229e-5, -0.005237573750382937, -0.00521425788235804, 0.0010987513263361157, 0.0012247230469622826, -1.0230077589151201e-5, -0.00020169520057662622, 0.0227602141028982, 0.022703921004980407, -0.005176157089838655, -0.005209476408990865, 5.9022959166777645e-5, -0.0003710185828856445, 4.126509745624134e-5, 3.004908847278789e-5, 5.741454443926303e-5, -1.5159557276861766e-5, -0.005231700673863311, 0.0011519228910391289, -0.005202024072064773, 0.0011587343139240933, 1.034515549397881e-5, 0.2401828216613494, 0.022741838399218298, 0.02396021849301544, 0.022618149592867485, 0.024092177319145484, 0.00021870173726336182, 3.759636070261756e-5, 4.473430141232489e-5, -8.361117782900046e-5, 5.4590940296975486e-5, 5.545558672214233e-5, 0.0011158346840690573, 0.0011095711310929218, 0.001159750714117626, 0.0011587258402532905, 5.3634888786043835e-5, -0.00021137512842792452, 0.02277219011058671, -0.005218538197444662, -0.00520617512392482, 0.022794666668499105, 3.577383240238182e-5, 4.01317171112826e-5, -0.0007113497937424725, 5.01790506683122e-5, 1.0736696916236677e-5, 5.2704514911311555e-5, 0.0011558211413734518, -0.005172075894508485, -0.005216077834546224, 0.00114712713342918, 2.9086364422307367e-6, -0.07621850758784611, -6.8371041949594985e-6, -0.07647671978855558, -0.00023023921656427853, -0.00014151769706298795, 6.706482251716676e-5, -0.000142148853894656, 1.3368124626667291e-5, -0.00014534781056151568, -0.00026906768764883106, 5.074882478504862e-5, 3.208218505336163e-5, -6.0319786435735825e-5, 1.893054394953279e-5, 4.359203756489939e-5, -7.403020585297099e-5, -0.00024126552071525732, 0.022743876091154185, 0.02264619199943323, -0.005204902661015349, -0.0052069628098598796, 3.246763930125802e-5, -0.0006021230654709083, 4.524777674390381e-5, 4.161470953077641e-5, 4.294917704514901e-5, -5.317986375546779e-6, -0.005226430285767512, 0.0011531814319120223, -0.0052203443861177055, 0.001163504076910439, 8.251347722928545e-6, -0.0002831599192184228, -0.0052114610834019534, 0.021768308548481947, -0.0051950318119055325, 0.023684702501313142, 7.335506210252238e-6, 0.00019687664564830475, -9.146606812927615e-5, -0.0002675964930853621, 0.00020281047821541168, -0.00010352501305960558, 0.0011062920416299654, 0.0012004923062478169, -0.005231073080911951, -0.0051994367028900665, 1.5098073335808258e-5, -0.0005211764506997532, -0.005219411383104591, 0.022715378338927863, 0.022701067542499884, -0.005202343814910685, 5.7984597580752974e-5, 4.0406992981411214e-5, 3.6036938981178024e-6, 4.302517749578547e-5, -0.0004030175729666128, 4.174384731382801e-5, -0.005206815860780703, 0.0011590407649374266, 0.0011664179609191657, -0.005184433074316679, 1.399005014009889e-5, 0.24028099757129465, 0.023960857510588695, 0.02263472965434055, 0.023748119807978422, 0.022641325318030103, -0.0001078034960939004, 3.9623055669654254e-5, 4.519247239555658e-5, 0.00017888870517673413, 3.8319933254137114e-5, 4.7176210570868776e-5, 0.0011547357301565828, 0.0011418050869375254, 0.001106888911789872, 0.001099848005124057, 4.061122394643272e-5
    ] ≈ mean(measured[:PC])[:]
    @test [
        0.0034673612596862443, 0.00041351828086016437, 0.0003573832577784278, 0.00030236143706842373, 0.000287404813444133, 3.27058689253795e-5, 2.757934374842902e-5, 2.8740937740900392e-5, 3.713024075457213e-5, 3.0098137449508425e-5, 2.4185332747920746e-5, 4.117785701144408e-5, 3.0495826874181978e-5, 3.1183535292097794e-5, 3.22128232656912e-5, 2.4227168158487088e-5, 0.000619808567047431, 0.0006928594127240472, 0.00011886958734286526, 0.0001209185806606663, 0.00013761541551376261, 0.00012095708437284899, 0.00012312910544175787, 0.00012686643221011386, 2.4611833782231804e-5, 2.6281053535585237e-5, 2.7767691568146652e-5, 2.7605826103915483e-5, 2.874780844233353e-5, 2.5671363829537975e-5, 3.913864966247324e-5, 3.7473964983133804e-5, 0.0005825794995591486, 0.00013161931354892204, 0.0005865993648366335, 0.00012740838870239346, 0.00011771985184676186, 2.6105385532070358e-5, 0.00011963742392693794, 2.6281470327640076e-5, 0.00011380030248467209, 0.00010634077929913143, 2.673755533632601e-5, 2.574320919488673e-5, 3.8202617185239017e-5, 2.666155665920672e-5, 2.5416024027531364e-5, 3.667042084660653e-5, 0.0006928594127240472, 0.00012095708437284901, 0.00012312910544175787, 0.0006198085670475011, 0.00012686643221011386, 0.0001209185806606663, 2.7605826103915483e-5, 2.8747808442333525e-5, 2.5671363829537975e-5, 0.00011886958734286525, 0.00013761541551376261, 2.6281053535585237e-5, 2.7767691568146652e-5, 3.747396498313381e-5, 2.4611833782231804e-5, 3.913864966247324e-5, 0.0005865993648366335, 0.00011963742392693794, 0.00011380030248467209, 0.00010634077929913145, 0.0005825794995591486, 2.5743209194886722e-5, 2.666155665920672e-5, 0.00013161931354892204, 0.00011771985184676186, 2.5416024027531367e-5, 0.00012740838870239346, 3.667042084660653e-5, 2.6105385532070358e-5, 2.6281470327640076e-5, 2.6737555336326012e-5, 3.8202617185239017e-5, 0.0007463802965843264, 0.00012396910893079232, 0.00013458847316197308, 0.0006734848012142641, 0.00012778553632065078, 0.00011841841045257377, 2.8788664898351322e-5, 2.711749464981363e-5, 2.8147911053513426e-5, 0.00011229066920733237, 0.00012879672397909584, 2.424323569666264e-5, 2.740767147770857e-5, 3.983072143354243e-5, 2.7124441508020444e-5, 3.880701181302436e-5, 0.0034765048615207845, 0.00018211740796256554, 0.00023803891993535455, 0.00016641435453778334, 0.00020665660968206733, 2.8682522845702972e-5, 1.1214345516123745e-5, 1.2611650608038384e-5, 2.616309114217423e-5, 1.1539110347255033e-5, 1.3048783721320572e-5, 2.0201630486088622e-5, 1.8258545806032288e-5, 1.751728075398915e-5, 1.8579507392083484e-5, 1.758923400225678e-5, 0.0003903986613143714, 6.834021969842566e-5, 0.0001628095560388153, 0.00014959468051083252, 5.6808570746287257e-5, 1.4159504065333135e-5, 1.176207767092693e-5, 1.2527680260855569e-5, 1.387884181864964e-5, 0.0003414360059244542, 1.2368826019942324e-5, 7.170646928207452e-5, 1.9450779557307787e-5, 1.8557491202021964e-5, 6.28762274762032e-5, 1.2609344582625812e-5, 0.00035895140491245213, 0.00022732202521897655, 6.975252291125887e-5, 0.00013468262278059192, 6.02023132302705e-5, 0.00036001846863713104, 1.8395596205315192e-5, 1.7629970398106746e-5, 1.7073236826779915e-5, 1.68564910242668e-5, 2.2070794100932635e-5, 7.30549204885174e-5, 6.380148376666393e-5, 2.19960550966818e-5, 1.6407251895343946e-5, 1.5833901726454464e-5, 0.00034938713426266625, 7.789650729053377e-5, 5.8047495975893244e-5, 0.00015385475403130946, 0.00014391191204584546, 1.2043100389674251e-5, 1.06108221608599e-5, 1.514257615999165e-5, 1.4734802259999159e-5, 1.331434002041205e-5, 0.0003561856300635886, 1.9043041892375152e-5, 6.855464683569093e-5, 1.8995789479753168e-5, 5.932704685875644e-5, 1.198239627599827e-5, 0.0006530072317116828, 0.00013022210227817488, 0.00012657771716887003, 0.00010400636922687282, 0.0006449782307489278, 2.8414930737342316e-5, 2.720775287040348e-5, 0.00012533839943745657, 0.00012075122806325961, 2.3976655334614427e-5, 0.00011597735610170722, 3.974560337798094e-5, 2.6303254998095558e-5, 2.932525994431588e-5, 2.830446990792913e-5, 3.67574926072042e-5, 0.00033506903104251563, 0.00015434657674737962, 5.909414811492801e-5, 7.615652689924293e-5, 0.0001486944860518285, 1.451173695550484e-5, 1.5664827792552825e-5, 0.0003864498980748532, 1.2902734197391464e-5, 1.4537554061912185e-5, 1.2942019192416203e-5, 1.916366057921211e-5, 7.012413715585553e-5, 5.758560953361099e-5, 2.0050766224094443e-5, 1.4370056182773897e-5, 0.0034420082191245266, 0.00028149655601929056, 0.00016097514383294612, 0.00023648235998510609, 0.00014657693762324447, 2.8543268719749883e-5, 1.5396257773228164e-5, 1.4130754353857285e-5, 3.2026288620094134e-5, 1.4088039072201864e-5, 1.0637651989478455e-5, 2.5723825097233678e-5, 2.28747401595809e-5, 1.7489764930616788e-5, 1.7710878662288e-5, 1.5419314853342416e-5, 0.00035034353655643386, 7.968073243140843e-5, 5.911603247809036e-5, 0.00015646713483886927, 0.00014367774041855634, 1.4926177392559564e-5, 1.1751192740774561e-5, 1.4471746387626763e-5, 1.712412018595204e-5, 1.4474128632572874e-5, 0.0003600054793628087, 1.9148933823092275e-5, 6.848121769999617e-5, 1.9155645132752573e-5, 5.667334412056974e-5, 1.1385075381828164e-5, 0.0003553392122475336, 6.590867540765296e-5, 0.00019793279933151586, 6.142743290561022e-5, 0.00011579653697726856, 1.4953109507610678e-5, 2.0669219536650572e-5, 2.0429470692268192e-5, 0.0003483943367133017, 2.0829596912603415e-5, 1.8948528165298256e-5, 2.9964315021905215e-5, 2.054855163810491e-5, 6.397319960832694e-5, 6.339678358744845e-5, 1.7597281000040186e-5, 0.0006734848012142641, 0.0007463802965843264, 0.00011229066920733237, 0.00011841841045257377, 0.00012879672397909584, 0.00012396910893079232, 0.00013458847316197308, 0.00012778553632065078, 2.7124441508020444e-5, 2.424323569666264e-5, 2.740767147770857e-5, 2.8788664898351322e-5, 2.711749464981363e-5, 2.8147911053513426e-5, 3.880701181302436e-5, 3.983072143354243e-5, 0.00036001846863713104, 0.00013468262278059192, 7.305492048851878e-5, 0.00022732202521896701, 6.380148376666393e-5, 0.00035895140491245213, 1.68564910242668e-5, 2.2070794100932635e-5, 1.5833901726454467e-5, 1.8395596205315192e-5, 1.7629970398106746e-5, 6.975252291125887e-5, 6.02023132302705e-5, 1.6407251895343946e-5, 2.19960550966818e-5, 1.7073236826779915e-5, 0.0003561856300635886, 0.00014391191204583793, 0.00015385475403130946, 6.855464683569242e-5, 5.932704685875644e-5, 1.514257615999165e-5, 0.00034938713426266635, 1.4734802259999157e-5, 1.3314340020412049e-5, 1.2043100389674251e-5, 1.198239627599827e-5, 7.789650729053289e-5, 1.8995789479752944e-5, 5.804749597589675e-5, 1.9043041892375488e-5, 1.06108221608599e-5, 0.0034765048615209037, 0.00018211740796256554, 0.00023803891993535, 0.00016641435453778334, 0.00020665660968207782, 2.868252284570298e-5, 1.1214345516123745e-5, 1.2611650608038384e-5, 2.6163091142174232e-5, 1.1539110347255033e-5, 1.3048783721320576e-5, 2.0201630486088937e-5, 1.8258545806032173e-5, 1.7517280753988788e-5, 1.8579507392083484e-5, 1.7589234002256784e-5, 0.00034143600592445415, 0.00016280955603880864, 6.287622747620374e-5, 7.170646928207452e-5, 0.00014959468051083252, 1.1762077670926928e-5, 1.3878841818649643e-5, 0.0003903986613143714, 1.2368826019942326e-5, 1.260934458262581e-5, 1.4159504065333133e-5, 1.8557491202022195e-5, 6.834021969842713e-5, 5.6808570746287257e-5, 1.9450779557307787e-5, 1.2527680260855569e-5, 0.0006449782307489278, 0.00012533839943745657, 0.0006530072317116828, 0.00011597735610170722, 0.00012075122806325961, 2.6303254998095558e-5, 0.00013022210227817488, 2.932525994431588e-5, 0.00012657771716887003, 0.00010400636922687282, 2.830446990792913e-5, 2.8414930737342316e-5, 3.67574926072042e-5, 2.720775287040348e-5, 2.3976655334614427e-5, 3.974560337798094e-5, 0.00036000547936280877, 0.00014367774041855634, 0.00015646713483886927, 6.848121769999468e-5, 5.667334412056914e-5, 1.4471746387626764e-5, 0.00035034353655643386, 1.712412018595204e-5, 1.4474128632572874e-5, 1.4926177392559564e-5, 1.1385075381828164e-5, 7.968073243140716e-5, 1.9155645132752573e-5, 5.911603247809094e-5, 1.91489338230925e-5, 1.1751192740774561e-5, 0.0003483943367133017, 6.397319960832907e-5, 0.0001157965369772826, 6.339678358744898e-5, 0.0001979327993315213, 1.7597281000040186e-5, 2.0429470692268192e-5, 2.0669219536650575e-5, 0.0003553392122475336, 1.894852816529827e-5, 2.0829596912603418e-5, 2.054855163810501e-5, 2.9964315021905215e-5, 6.590867540765245e-5, 6.142743290560801e-5, 1.495310950761068e-5, 0.0003864498980748532, 7.012413715585553e-5, 0.00015434657674738664, 0.0001486944860518285, 5.758560953361158e-5, 1.2942019192416203e-5, 1.451173695550484e-5, 1.4370056182773897e-5, 1.5664827792552825e-5, 0.00033506903104251563, 1.2902734197391464e-5, 7.615652689924427e-5, 2.0050766224094338e-5, 1.916366057921211e-5, 5.909414811492801e-5, 1.4537554061912185e-5, 0.0034420082191244862, 0.0002814965560192867, 0.00016097514383294612, 0.00023648235998511067, 0.00014657693762324447, 2.8543268719749876e-5, 1.539625777322816e-5, 1.4130754353857285e-5, 3.2026288620094134e-5, 1.4088039072201864e-5, 1.0637651989478453e-5, 2.5723825097233678e-5, 2.2874740159580624e-5, 1.7489764930616788e-5, 1.771087866228824e-5, 1.5419314853342416e-5
    ] ≈ std_error(measured[:PC])[:]
end



@testset "DQMC: repulsive HubbardModel Simulation" begin
    Random.seed!(123)
    m = HubbardModelRepulsive(dims=2, L=2);
    mc = DQMC(m, beta=1.0);
    mask = DistanceMask(lattice(m))
    MonteCarlo.unsafe_push!(mc, :M => MagnetizationMeasurement(mc, m))
    MonteCarlo.unsafe_push!(mc, :CDC => ChargeDensityCorrelationMeasurement(mc, m, mask=mask))
    MonteCarlo.unsafe_push!(mc, :SDC => SpinDensityCorrelationMeasurement(mc, m, mask=mask))
    MonteCarlo.unsafe_push!(mc, :PC => PairingCorrelationMeasurement(mc, m, mask=mask, directions=3))
    run!(mc, sweeps=1000, thermalization=10, verbose=false);

    # Check measurements
    measured = measurements(mc)

    # Greens
    @test [
        0.5230841929541843 -0.24580190394819287 -0.24353625126427442 0.004793235750642132 2.4747881310481137e-16 -3.1027820349620315e-16 7.391748537089951e-17 -2.5831301570682258e-17; -0.23337037385181028 0.46967433733205316 0.013610778813472314 -0.24084716318640784 -8.750483476358716e-17 1.7993237681827342e-16 -6.178032631496232e-17 -4.866665029973933e-18; -0.23685341419748945 0.005966740755167903 0.4503815764207921 -0.2479025996196592 -1.363766865323684e-16 1.7580521739347312e-16 -2.8861255234634915e-17 8.969676585036754e-18; 0.0034393763662858546 -0.23649252185732803 -0.2316584856751386 0.5240047156724452 2.6940842904323674e-17 -4.5315575868456136e-17 1.2857219650695361e-17 -2.045675489460436e-17; -1.1933650703402011e-17 -1.143143885417272e-17 4.92560332867809e-18 3.652108436053344e-18 0.4769158070458147 -0.23337037385181056 -0.23685341419748962 -0.0034393763662852817; 4.695172892856388e-18 1.4031001247466892e-17 -3.660193161833258e-18 -7.181060269264664e-18 -0.24580190394819268 0.5303256626679477 -0.005966740755167636 -0.23649252185732744; 5.0858535409850376e-18 3.481044858895411e-18 7.064468561930262e-18 -9.582780353138076e-18 -0.2435362512642741 -0.013610778813472 0.5496184235792082 -0.23165848567513814; 4.252533790177161e-18 -4.150667709361308e-18 -9.165073498114988e-18 4.441452577704451e-18 -0.004793235750641649 -0.2408471631864082 -0.24790259961965982 0.4759952843275548
    ] ≈ measured[:Greens].obs |> mean           atol=0.0001
    @test [
        0.013739983783213679 0.006492383160048527 0.007868166257888703 0.007011599433902677 1.6371492330947007e-16 1.6895171942421666e-16 1.3147713438583098e-16 1.741991342685165e-16; 0.0067046975595375854 0.014363246104568633 0.007009979794310533 0.006051719092939807 1.0350643125273229e-16 1.2990285472829452e-16 9.03303691512482e-17 1.1406644150330444e-16; 0.006597825955961891 0.006909577363813027 0.014480278026596427 0.007734651000791531 8.312635141518536e-17 9.627695667394742e-17 7.463707227745457e-17 9.277591280283248e-17; 0.006452512754932946 0.006407099317999007 0.005547394403978844 0.013834977867382078 6.072279899847821e-17 5.5474009445331095e-17 5.58424813603294e-17 6.450100293405204e-17; 1.1688795318424512e-17 1.1065873105400382e-17 1.0498821098538937e-17 1.0574872897964097e-17 0.013739983783213618 0.006704697559537689 0.006597825955961944 0.006452512754932903; 1.2642432560141777e-17 1.1459393142803876e-17 1.1730533470603598e-17 1.3804242444868925e-17 0.006492383160048495 0.014363246104568825 0.0069095773638130345 0.006407099317998975; 1.0260271606226589e-17 9.835267098871163e-18 1.1811925523273703e-17 1.3415958666800159e-17 0.007868166257888711 0.007009979794310522 0.014480278026596368 0.005547394403978744; 1.1196670079817317e-17 1.1626921359631006e-17 9.630823465522755e-18 1.3020502031907809e-17 0.007011599433902663 0.006051719092939749 0.007734651000791531 0.013834977867382038
    ] ≈ measured[:Greens].obs |> std_error      atol=0.0001

    # Boson Energy
    @test  0.0 == measured[:BosonEnergy].obs |> mean
    @test  0.0 == measured[:BosonEnergy].obs |> std_error

    # Configurations :conf
    @test [
        0.06 -0.18 0.0 0.24 0.1 -0.22 -0.02 -0.18 0.02 -0.08; 0.24 0.06 -0.08 0.08 -0.12 -0.16 -0.12 0.16 0.06 0.18; 0.16 -0.02 0.1 0.16 0.16 0.08 -0.08 0.14 0.16 0.22; 0.08 0.08 0.16 -0.06 -0.04 -0.2 -0.1 0.14 -0.26 -0.02
    ] ≈ [MonteCarlo.decompress(mc, m, c) for c in mc.configs] |> mean                    atol=0.01
    @test MonteCarlo.decompress(mc, m, mc.configs[end]) == mc.conf

    # Charge Density Correlation
    @test [
        1.4566330702285535, 0.8922305372281553, 0.8919439885568281, 0.9917464772099726
    ][:] ≈ mean(measured[:CDC])
    @test [
        0.0026782692043020697, 0.00099655437705915, 0.0010896507507328099, 0.0007703322144962636
    ][:] ≈ std_error(measured[:CDC])

    # Magnetization
    @test [
        -2.355451624014094e-16, -1.9396337806574036e-16, 2.1796786672704633e-17, 1.6015302316899927e-17
    ] ≈ mean(measured[:M].x)        atol=1e-14
    @test [
        1.656175115237972e-16, 1.3043830171432643e-16, 7.764376762927484e-17, 6.657122636316582e-17
    ] ≈ std_error(measured[:M].x)   atol=1e-14
    @test [
        -2.5941246380821326e-16 + 0.0im, -1.6590137557080656e-16 + 0.0im, 3.5925723796565145e-17 + 0.0im, 2.489820747230881e-17 + 0.0im
    ] ≈ mean(measured[:M].y)        atol=1e-14
    @test [
        1.6263224765435753e-16, 1.3037633282695832e-16, 7.342937854677689e-17, 6.502382275618026e-17
    ] ≈ std_error(measured[:M].y)   atol=1e-14
    @test [
        -0.04616838590836951, 0.06065132533589437, 0.09923684715841624, -0.04800943134489042
    ] ≈ mean(measured[:M].z)
    @test [
        0.02747996756642731, 0.028726492209137387, 0.02896055605319296, 0.02766995573476392
    ] ≈ std_error(measured[:M].z)

    # Spin density correlations (x, y, z)
    @test [
        0.5433669297714467, -0.12437171904169995, -0.12368172048269852, 0.009923485745788156
    ][:] ≈ mean(measured[:SDC].x)
    @test [
        0.0026782692042987537, 0.0022983340582912737, 0.002353490577061975, 0.0009641628066196104
    ][:] ≈ std_error(measured[:SDC].x)
    @test [
        0.5433669297714467, -0.12437171904169995, -0.12368172048269852, 0.009923485745788156
    ][:] ≈ mean(measured[:SDC].y)
    @test [
        0.0026782692042987537, 0.0022983340582912737, 0.002353490577061975, 0.0009641628066196104
    ][:] ≈ std_error(measured[:SDC].y)
    @test [
        0.5433669297714467, -0.1407248237886177, -0.13469528563459737, 0.021836355692197208
    ][:] ≈ mean(measured[:SDC].z)
    @test [
        0.0026782692042987537, 0.00685231704618611, 0.006880030290025915, 0.006018343758552928
    ][:] ≈ std_error(measured[:SDC].z)

    # Pairing Correlations
    @test [
        0.2283165351142766, 0.053884731385922334, 0.05402800572158593, -0.004126761395013616, -0.11906413853190698, -0.1228011646739253, 0.0015436133669731811, -0.0014326893440720844, -0.11837340950936874, 0.0016084598123848911, -0.12171710121367313, -0.0016324333927493647, -0.11688217609977494, -0.12061920224179326, 0.0014326893440719973, -0.0015436133669732637, 0.2582388402541932, 0.06218585952084998, 0.056153523300337405, -0.0008326441052118847, -0.003054549722874357, 0.05875139959751055, 0.05878152570021416, 0.003993842088056015, -0.11771523641270164, 0.001632433392749275, -0.1210589281170061, -0.0016084598123849777, -0.002958690833335851, 0.05878152570021415, 0.05875139959751059, 0.00389798319851752, 0.2566598185478563, 0.05615263382998908, 0.06184086024134926, -0.0008858039745874172
    ] ≈ mean(measured[:PC])[:]
    @test [
        0.0013391346021497915, 0.0004982771885309067, 0.0005448253753667949, 0.00038516610724540336, 0.0016016131732443173, 0.0017141004781108316, 0.0012429518212933816, 0.0011714492008307745, 0.0016373885600156322, 0.0012420233922042646, 0.0017529816908787692, 0.0011827563750659903, 0.0017610139349806832, 0.0015774517400554686, 0.0011714492008307739, 0.0012429518212933835, 0.0017259181728461173, 0.0011491670291456368, 0.0006827632827524408, 0.0004940045633563762, 0.0025779199247837354, 0.0005749441866725301, 0.0006039963872098175, 0.0028684069362159576, 0.0018833151910004763, 0.001182756375065987, 0.0014243405271333626, 0.0012420233922042674, 0.002601240287899729, 0.0006039963872098677, 0.0005749441866724924, 0.0028894707006772557, 0.001660449856361402, 0.0006564589554519525, 0.0011767452885309876, 0.0004875641528478506
    ] ≈ std_error(measured[:PC])[:]
end



# TODO
# remove this / make this an example / make this faster
#=


"""
    stat_equal(
        expected_value, actual_values, standard_errors;
        min_error = 0.1^3, order=2, rtol = 0, debug=false
    )

Compare an `expected_value` (i.e. literature value, exact result, ...) to a set
of `actual_values` and `standard_errors` (i.e. calculated from DQMC or MC).

- `order = 2`: Sets the number of σ-intervals included. (This affects the
accuracy of the comaprison and the number of matches required)
- `min_error = 0.1^3`: Sets a lower bound for the standard error. (If one
standard error falls below `min_error`, `min_error` is used instead. This
happens before `order` is multiplied.)
- `rtol = 0`: The relative tolerance passed to `isapprox`.
- `debug = false`: If `debug = true` information on comparisons is always printed.
"""
function stat_equal(
        expected_value, actual_values::Vector, standard_errors::Vector;
        min_error = 0.001, order=2, debug=false, rtol=0.0
    )

    @assert order > 1
    N_matches = floor(length(actual_values) * (1 - 1 / order^2))
    if N_matches == 0
        error("No matches required. Try increasing the sample size or σ-Interval")
    elseif N_matches < 3
        @warn "Only $N_matches out of $(length(actual_values)) are required!"
    end

    is_approx_equal = [
        isapprox(expected_value, val, atol=order * max(min_error, err), rtol=rtol)
        for (val, err) in zip(actual_values, standard_errors)
    ]
    does_match = sum(is_approx_equal) >= N_matches

    if debug || !does_match
        printstyled("────────────────────────────────\n", color = :light_magenta)
        print("stat_equal returned ")
        printstyled("$(does_match)\n\n", color = does_match ? :green : :red)
        print("expected: $expected_value\n")
        print("values:   [")
        for i in eachindex(actual_values)
            if i < length(actual_values)
                printstyled("$(actual_values[i])", color = is_approx_equal[i] ? :green : :red)
                print(", ")
            else
                printstyled("$(actual_values[i])", color = is_approx_equal[i] ? :green : :red)
            end
        end
        print("]\n")
        print("$(order)-σ:      [")
        for i in eachindex(standard_errors)
            if i < length(standard_errors)
                printstyled("$(standard_errors[i])", color = is_approx_equal[i] ? :green : :red)
                print(", ")
            else
                printstyled("$(standard_errors[i])", color = is_approx_equal[i] ? :green : :red)
            end
        end
        print("]\n")
        print("checks:   [")
        for i in eachindex(standard_errors)
            if i < length(standard_errors)
                printstyled("$(is_approx_equal[i])", color = is_approx_equal[i] ? :green : :red)
                print(", ")
            else
                printstyled("$(is_approx_equal[i])", color = is_approx_equal[i] ? :green : :red)
            end
        end
        print("]\n")
        printstyled("────────────────────────────────\n", color = :light_magenta)
    end
    does_match
end



@testset "DQMC: triangular Hubbard model vs dos Santos Paper" begin
    # > Attractive Hubbard model on a triangular lattice
    # dos Santos
    # https://journals.aps.org/prb/abstract/10.1103/PhysRevB.48.3976
    Random.seed!()
    sample_size = 5

    @time for (k, (mu, lit_oc, lit_pc,  beta, L)) in enumerate([
            (-2.0, 0.12, 1.0,  5.0, 4),
            (-1.2, 0.48, 1.50, 5.0, 4),
            ( 0.0, 0.88, 0.95, 5.0, 4),
            ( 1.2, 1.25, 1.55, 5.0, 4),
            ( 2.0, 2.00, 0.0,  5.0, 4),

            # (-2.0, 0.12, 1.0,  8.0, 4),
            # (-1.2, 0.48, 1.82, 8.0, 4),
            # ( 0.0, 0.88, 0.95, 8.0, 4),
            # ( 1.2, 1.25, 1.65, 8.0, 4),
            # ( 2.0, 2.00, 0.0,  8.0, 4),

            # (-2.0, 0.40, 1.0,  5.0, 6),
            # (-1.2, 0.40, 1.05, 5.0, 6),
            # (0.01, 0.80, 1.75, 5.0, 6),
            # ( 1.2, 1.40, 2.0,  5.0, 6),
            # ( 2.0, 2.00, 0.0,  5.0, 6)
        ])
        @info "[$(k)/15] μ = $mu   L = $L   β = $beta (literature check)"
        m = HubbardModelAttractive(
            dims=2, L=L, l = MonteCarlo.TriangularLattice(L),
            t = 1.0, U = 4.0, mu = mu
        )
        OC_sample = []
        OC_errors = []
        PC_sample = []
        PC_errors = []
        for i in 1:sample_size
            mc = DQMC(
                m, beta=5.0, delta_tau=0.125, safe_mult=8,
                thermalization=2000, sweeps=2000, measure_rate=1,
                measurements = Dict{Symbol, MonteCarlo.AbstractMeasurement}()
            )
            push!(mc, :occ => MonteCarlo.OccupationMeasurement)
            push!(mc, :PC => MonteCarlo.PairingCorrelationMeasurement)
            run!(mc, verbose=false)
            measured = measurements(mc)

            # mean(measured[:G]) = MC mean
            # diag gets c_i c_i^† terms
            # 2 (1 - mean(c_i c_i^†)) = 2 mean(c_i^† c_i) where 2 follows from 2 spins
            occupation = 2 - 2(measured[:occ].obs |> mean |> mean)
            push!(OC_sample, occupation)
            push!(OC_errors, 2(measured[:occ].obs |> std_error |> mean))
            push!(PC_sample, measured[:PC] |> swave |> mean)
            push!(PC_errors, measured[:PC] |> swave |> std_error)
        end
        # min_error should compensate read-of errors & errors in the results
        # dos Santos used rather few sweeps, which seems to affect PC peaks strongly
        @info "Occupation"
        @test stat_equal(lit_oc, OC_sample, OC_errors, min_error=0.025)
        @info "Pairing Correlation"
        @test stat_equal(lit_pc, PC_sample, PC_errors, min_error=0.05)
    end
end

=#
