@testset "MC: IsingModel Simulation" begin
    Random.seed!(123)
    m = IsingModel(dims=2, L=8);
    mc = MC(m, beta=0.35);
    run!(mc, sweeps=1000, thermalization=10, verbose=false);

    # Check measurements
    measured = measurements(mc)
    @test   25.47  ≈ measured[:Magn].M |> mean         atol=0.01
    @test    0.82  ≈ measured[:Magn].M |> std_error    atol=0.01
    @test  887.    ≈ measured[:Magn].M2 |> mean        atol=1.0
    @test   46.    ≈ measured[:Magn].M2 |> std_error   atol=1.0
    @test    0.398 ≈ measured[:Magn].m |> mean         atol=0.001
    @test    0.013 ≈ measured[:Magn].m |> std_error    atol=0.001
    @test    1.300 ≈ measured[:Magn].chi |> mean       atol=0.001

    @test  -55.10  ≈ measured[:Energy].E |> mean       atol=0.01
    @test    0.88  ≈ measured[:Energy].E |> std_error  atol=0.01
    @test 3342.    ≈ measured[:Energy].E2 |> mean      atol=1.0
    @test  104.    ≈ measured[:Energy].E2 |> std_error atol=1.0
    @test   -0.861 ≈ measured[:Energy].e |> mean       atol=0.001
    @test    0.014 ≈ measured[:Energy].e |> std_error  atol=0.001
    @test    0.585 ≈ measured[:Energy].C |> mean       atol=0.001

    @test [
        -0.028 -0.02 0.022 0.018 0.002 -0.008 -0.026 -0.058; -0.016 -0.028 0.004 0.014 0.024 0.024 -0.026 -0.044; -0.048 -0.018 0.004 0.02 0.02 0.002 -0.016 -0.018; -0.028 -0.016 0.016 -0.02 -0.018 -0.024 -0.026 -0.03; -0.02 -0.016 -0.024 -0.044 -0.028 -0.006 -0.026 -0.05; -0.008 -0.006 0.004 -0.038 -0.038 -0.016 -0.03 -0.022; -0.028 -0.018 0.014 -0.01 -0.018 0.008 0.008 -0.05; -0.038 -0.028 0.016 0.026 -0.018 -0.022 -0.018 -0.054
    ] ≈ measured[:conf].obs |> mean                    atol=0.001
    @test last(measured[:conf].obs) == mc.conf
end


@testset "DQMC: HubbardModel Simulation" begin
    Random.seed!(123)
    m = HubbardModelAttractive(dims=2, L=4);
    N = 4*4
    mc = DQMC(m, beta=1.0);
    mask = MonteCarlo.DistanceMask(MonteCarlo.lattice(m))
    MonteCarlo.unsafe_push!(mc, :CDC => MonteCarlo.ChargeDensityCorrelationMeasurement(mc, m, mask=mask))
    MonteCarlo.unsafe_push!(mc, :SDC => MonteCarlo.SpinDensityCorrelationMeasurement(mc, m, mask=mask))
    MonteCarlo.unsafe_push!(mc, :PC => MonteCarlo.PairingCorrelationMeasurement(mc, m, mask=mask))
    # MonteCarlo.unsafe_push!(mc, :PC => MonteCarlo.PairingCorrelationMeasurement(
    #     mc, m, mask=RawMask(model.l)
    # ))
    run!(mc, sweeps=1000, thermalization=10, verbose=false);

    # Check measurements

    # Greens

    measured = measurements(mc)
    @test [
        0.477228 -0.148092 0.000650671 -0.152739 -0.156428 0.0050096 0.0343558 0.00164354 0.000686254 0.0314209 -0.00315709 0.0363441 -0.149735 9.70741e-5 0.0335553 0.00358477; -0.153774 0.454577 -0.160642 0.000648542 0.0126497 -0.159687 0.00669076 0.0333576 0.037061 0.00569243 0.0358175 -0.00404491 0.00355269 -0.16096 0.0045801 0.0340806; 0.00137329 -0.149875 0.525756 -0.156449 0.0352624 0.000278655 -0.152092 -0.00291045 0.000989166 0.0322977 -0.00177604 0.0358907 0.0322688 -0.00133419 -0.151118 0.00029095; -0.145036 0.000208847 -0.148504 0.520469 0.00232344 0.0322997 -0.00403395 -0.141013 0.0340725 -0.00152847 0.0315167 -0.0043278 -0.0022816 0.032141 -0.00106526 -0.149073; -0.153225 0.0116195 0.0344808 0.00197823 0.459859 -0.154248 0.00721501 -0.148024 -0.157576 0.00551732 0.0349254 0.00233362 0.00219748 0.0371333 -0.00627411 0.03385; 0.00507538 -0.151558 -0.000391151 0.0329975 -0.155022 0.479573 -0.150905 0.00226697 0.00295499 -0.148607 0.00301816 0.0347823 0.0315428 0.00392446 0.0326532 -0.00249034; 0.0351943 0.00306724 -0.159841 -0.00715043 0.00575413 -0.155764 0.491007 -0.148957 0.0353336 0.00576441 -0.153046 -0.00141562 -0.000898893 0.0362212 0.00138285 0.0337357; 0.00118721 0.0348373 -0.00172386 -0.166127 -0.168602 0.000460718 -0.16182 0.508259 -0.000832228 0.036381 0.000702338 -0.165049 0.0363685 0.000530091 0.0375223 3.16583e-7; -0.000531546 0.031598 0.000765815 0.0349322 -0.150373 0.00357689 0.032698 -0.00108294 0.507991 -0.14935 0.00185427 -0.154108 -0.147832 -0.00104978 0.032203 -0.000816359; 0.0354625 0.00767388 0.0356703 0.000856574 0.00576076 -0.152291 0.0023841 0.0328979 -0.157559 0.475779 -0.156894 -0.00115001 -0.00177241 -0.158056 0.00557598 0.0338655; -0.00215687 0.0327828 -0.00226684 0.0351669 0.0352777 0.00517752 -0.149678 -0.000851672 0.00202061 -0.151299 0.480858 -0.157663 0.0346624 6.83759e-5 -0.155145 0.000856897; 0.0346939 -0.00253293 0.0333441 -0.00604537 -0.000972427 0.034324 -0.000290598 -0.147195 -0.160874 -0.00191725 -0.157674 0.52118 -0.00359494 0.0360121 0.00140374 -0.153626; -0.156798 0.00415648 0.0344931 -0.00219987 0.00366139 0.0365817 -0.00100057 0.0324253 -0.163216 -0.00268529 0.0365863 -0.00464487 0.526158 -0.162021 0.00374309 -0.151599; -0.000494114 -0.148824 -0.00554303 0.0321295 0.0336398 0.00246292 0.0314112 -0.00022372 -0.00163466 -0.149309 0.00169644 0.0332757 -0.149364 0.494472 -0.146979 -0.001565; 0.0343884 0.00516688 -0.153669 -0.00249342 -0.00596883 0.0360426 0.00222142 0.0311754 0.0350533 0.00385871 -0.154668 0.00290686 4.46472e-5 -0.155343 0.498268 -0.146554; 0.00117938 0.0336081 0.000884403 -0.159131 0.0366746 -0.00326657 0.0348769 0.00402202 -0.00051693 0.0347719 0.00395268 -0.160173 -0.154205 0.000746075 -0.154492 0.47354
    ] ≈ measured[:Greens].obs |> mean           atol=0.0001
    @test [
        0.0205191 0.00466986 0.00319713 0.00433101 0.0063448 0.00298264 0.00188447 0.00270596 0.00279388 0.00147149 0.00223948 0.00191749 0.00544694 0.0034801 0.00166324 0.00279062; 0.00581179 0.0173809 0.00615989 0.00298333 0.00264239 0.00544051 0.00288374 0.00180361 0.00208151 0.00286832 0.0019582 0.0017646 0.00267498 0.00597742 0.00256961 0.00180452; 0.00304324 0.00535371 0.0171345 0.00603167 0.00188977 0.00215002 0.00496448 0.00224604 0.0019083 0.00161783 0.00226727 0.00188134 0.00147511 0.00266665 0.00549195 0.00243711; 0.00409947 0.00231981 0.00510606 0.0172372 0.00209903 0.00155016 0.00232761 0.00370052 0.0018203 0.00180111 0.00127228 0.00238768 0.00236927 0.00137936 0.00228196 0.00505507; 0.0059045 0.0025362 0.00187802 0.00270614 0.0191752 0.00584846 0.00234163 0.00566209 0.00677845 0.00217692 0.001687 0.00235139 0.00203264 0.00186346 0.00162346 0.00230803; 0.00271169 0.00545808 0.00263302 0.0016385 0.00582896 0.0177921 0.00586849 0.00208916 0.00277508 0.00461105 0.00264704 0.00144147 0.00176448 0.00242271 0.0019095 0.00155428; 0.00196409 0.00206585 0.00588655 0.00288169 0.00244775 0.00538384 0.0147285 0.00616923 0.00185163 0.00234098 0.00470289 0.00209398 0.00170172 0.00177406 0.00201058 0.00195253; 0.00291793 0.00171317 0.00288986 0.00509084 0.00732493 0.00205185 0.00623073 0.0158797 0.00265401 0.00204915 0.00334973 0.00524786 0.00180304 0.00206516 0.00213687 0.00277024; 0.00228005 0.00158917 0.00184363 0.00168331 0.00600594 0.0023704 0.00159086 0.00215774 0.0179357 0.00458805 0.00265191 0.0057394 0.0048724 0.00230553 0.00160043 0.00256597; 0.00188113 0.00260856 0.00165067 0.00188637 0.00246927 0.00535851 0.00277197 0.00174793 0.00452975 0.0186795 0.00587128 0.00293908 0.00256491 0.00550431 0.00254789 0.00182041; 0.00199224 0.00198167 0.00239671 0.00148865 0.0019963 0.00225782 0.0048999 0.00253693 0.00227267 0.00495478 0.0167915 0.00544362 0.00193831 0.00261395 0.00605124 0.00213894; 0.00201428 0.00189837 0.00177325 0.00217569 0.00219486 0.00157229 0.00262323 0.00533245 0.00639645 0.00236338 0.00582814 0.0141972 0.00214637 0.00170952 0.00242774 0.00652343; 0.00551784 0.00314772 0.0018408 0.00244508 0.00239146 0.00211826 0.00165435 0.00167652 0.00526101 0.00247197 0.00198295 0.00232103 0.0166794 0.00479359 0.00235695 0.0051415; 0.00299558 0.00716651 0.00302339 0.00157788 0.00177353 0.00249744 0.00176033 0.00164171 0.00242951 0.00543594 0.00212568 0.00147208 0.00535451 0.0167751 0.00525319 0.00226052; 0.00194073 0.0021867 0.00667736 0.00247544 0.00198623 0.00230368 0.00222494 0.00156614 0.00178054 0.00234639 0.00585425 0.00259014 0.00238915 0.00565968 0.0169088 0.00539021; 0.00288388 0.00177993 0.00292207 0.00446213 0.00215593 0.00206059 0.00171043 0.00265896 0.00261172 0.00179292 0.00246213 0.00612522 0.00551238 0.00288897 0.00570215 0.0156827
    ] ≈ measured[:Greens].obs |> std_error      atol=0.0001

    # Boson Energy

    @test  0.784 ≈ measured[:BosonEnergy].obs |> mean           atol=0.001
    @test  0.430 ≈ measured[:BosonEnergy].obs |> std_error      atol=0.001

    # Configurations :conf

    @test [
        0.16 -0.06 0.1 0.04 0.16 -0.1 -0.06 0.16 0.04 0.0; -0.04 0.1 0.14 0.16 0.22 0.32 0.06 0.12 0.06 -2.22045e-18; -0.16 0.14 -0.1 -0.02 0.02 0.1 -0.22 -0.16 -0.04 -0.08; 0.04 -0.06 -0.08 -0.06 -0.08 -0.16 -0.08 -0.1 -0.04 0.06; 0.1 0.12 0.14 0.18 0.14 0.08 -2.22045e-18 0.18 -0.02 0.04; 0.22 0.04 0.22 -0.16 0.04 -0.08 -0.04 0.06 0.12 9.99201e-18; -0.08 0.06 0.16 0.08 0.04 -0.06 -0.08 0.18 0.0 -0.04; -0.2 0.04 0.0 0.06 -0.06 0.04 -2.10942e-17 -0.06 0.18 -0.16; -0.1 0.06 0.1 -0.12 -0.08 0.08 -8.88178e-18 -0.12 -0.08 0.1; 0.16 -0.04 0.06 -0.02 -0.1 0.1 0.16 -0.06 0.16 0.04; 0.08 0.1 -0.12 0.06 -0.06 0.2 0.06 -0.06 0.04 0.04; 0.08 -0.2 -0.04 -0.02 -0.12 -0.08 -0.1 0.14 -0.14 -0.02; -0.06 -0.1 -0.02 0.06 -0.08 -0.08 -0.02 0.1 -0.14 -0.16; 0.1 -0.08 -0.08 0.12 0.04 -0.02 -0.22 0.08 -0.06 0.12; -0.16 0.04 0.16 0.12 0.08 0.1 0.22 -0.16 -0.12 -0.02; -2.22045e-18 0.06 0.02 0.04 0.1 0.06 0.22 0.16 -0.06 -0.02
    ] ≈ measured[:conf].obs |> mean                    atol=0.01
    @test last(measured[:conf].obs) == mc.conf

    # Charge Density Correlation

    @test [
        1.5849456448588939 0.9701001185866102 1.0244814820688672 1.022266129934798; 0.9697846981453444 1.0275337295377804 1.026623185263297 1.0223883386970969; 0.9701001185866102 1.0293074250579948 1.0293074250579948 1.0223883386970969; 0.9697846981453444 1.026623185263297 1.0222661299347977 1.0303491969344496
    ][:] ≈ mean(measured[:CDC])
    @test [
        0.014339182796261328 0.015103839236855635 0.014881366201547199 0.014852492590291122; 0.01466075859047431 0.0146316314779252 0.015350965765936066 0.015454398305087881; 0.015103839236855635 0.013429158101512143 0.013429158101512805 0.015454398305088025; 0.014660758590474386 0.0153509657659365 0.014852492590291273 0.014691107761383475
    ][:] ≈ std_error(measured[:CDC])

    # Spin density correlations (x, y, z)

    @test [
        0.4413107278403039 -0.043536617096963874 -0.0009168475990912314 -0.002016368338663856; -0.04345933389844916 -0.0009282194533560656 -0.0009516994871196575 -0.0020119947928066984; -0.043536617096963874 -0.0009264768513716855 -0.0009264768513716858 -0.002011994792806698; -0.04345933389844915 -0.0009516994871196575 -0.002016368338663856 -0.0005286346557753946
    ][:] ≈ mean(measured[:SDC].x)
    @test [
        0.0016150660150651 0.00023159307395462136 5.630998807076127e-5 2.734317071034562e-5; 0.00026936524556120796 5.410748862202873e-5 3.4723053809401575e-5 2.429688372763204e-5; 0.00023159307395462136 2.793103304288827e-5 2.7931033042888085e-5 2.429688372763204e-5; 0.00026936524556119993 3.4723053809401575e-5 2.7343170710346242e-5 3.227352872694644e-5
    ][:] ≈ std_error(measured[:SDC].x)
    @test [
        0.4413107278403039 -0.043536617096963874 -0.0009168475990912314 -0.002016368338663856; -0.04345933389844916 -0.0009282194533560656 -0.0009516994871196575 -0.0020119947928066984; -0.043536617096963874 -0.0009264768513716855 -0.0009264768513716858 -0.002011994792806698; -0.04345933389844915 -0.0009516994871196575 -0.002016368338663856 -0.0005286346557753946
    ][:] ≈ mean(measured[:SDC].y)
    @test [
        0.0016150660150651 0.00023159307395462136 5.630998807076127e-5 2.734317071034562e-5; 0.00026936524556120796 5.410748862202873e-5 3.4723053809401575e-5 2.429688372763204e-5; 0.00023159307395462136 2.793103304288827e-5 2.7931033042888085e-5 2.429688372763204e-5; 0.00026936524556119993 3.4723053809401575e-5 2.7343170710346242e-5 3.227352872694644e-5
    ][:] ≈ std_error(measured[:SDC].y)
    @test [
        0.4413107278403039 -0.043536617096963874 -0.0009168475990912304 -0.002016368338663856; -0.04345933389844916 -0.0009282194533560664 -0.0009516994871196569 -0.0020119947928066966; -0.043536617096963874 -0.0009264768513716854 -0.0009264768513716854 -0.002011994792806697; -0.04345933389844915 -0.0009516994871196569 -0.0020163683386638562 -0.0005286346557753948
    ][:] ≈ mean(measured[:SDC].z)
    @test [
        0.0016150660150651 0.00023159307395463074 5.6309988070761405e-5 2.734317071034562e-5; 0.00026936524556119993 5.410748862202873e-5 3.4723053809401765e-5 2.429688372763239e-5; 0.0002315930739546401 2.793103304288835e-5 2.793103304288846e-5 2.4296883727631342e-5; 0.00026936524556119993 3.472305380940155e-5 2.734317071034562e-5 3.2273528726946354e-5
    ][:] ≈ std_error(measured[:SDC].z)

    # Pairing Correlations
    @test [
        0.02437586362036467 -0.00958887768265361 -0.009596184325007563 -0.00958887768265361 -0.009596184325007567 0.0016972640185658346 0.0017089510130743665 0.0017050218872883794 0.0017300390018994943 0.0017050218872883794 0.0017089510130743656 0.0021017104082382125 0.0021017104082382125 0.0021192302311540765 0.002119230231154076 -0.002664662460147059; -0.009552675906242546 0.02115751190453022 0.0016378413006197063 0.0016506340374275582 0.0016356210959019809 -0.009543127004631639 -0.009551242065619737 -0.00952711360659831 0.0020981253141126037 0.002068010003328025 0.0020731055218745323 0.001970993669694945 0.0019752235385092484 0.0019741001765318303 -0.0026805704422700693 0.002086064440308961; -0.009587115736993964 0.001645415470609099 0.021128207231322492 0.0016603535982733836 0.0016624478705300296 0.002076279710087783 -0.00953573103122558 0.0020788796804104333 -0.009556326774564644 -0.009522349881329495 0.0020981519677131235 0.001990043316639362 -0.0026925914163456444 0.0019679855362537664 0.0019670157506633586 0.0020684135918082325; -0.009552675906242546 0.0016506340374275584 0.0016356210959019809 0.02115751190453022 0.001637841300619707 -0.009543127004631637 0.0020731055218745323 0.002068010003328025 0.0020981253141126037 -0.00952711360659831 -0.00955124206561974 0.001975223538509249 0.001970993669694945 -0.0026805704422700693 0.00197410017653183 0.0020860644403089606; -0.009587115736993968 0.0016603535982733834 0.00166244787053003 0.001645415470609099 0.021128207231322492 0.002076279710087783 0.0020981519677131235 -0.009522349881329497 -0.009556326774564642 0.0020788796804104333 -0.009535731031225582 -0.002692591416345644 0.001990043316639362 0.0019670157506633595 0.0019679855362537664 0.002068413591808231; 0.0017455644951620516 -0.009573760723284183 0.002093558452699039 -0.009573760723284183 0.002093558452699039 0.021455144170234662 0.0018953810347908287 0.0019104416462611545 -0.002763145276353342 0.0019104416462611543 0.0018953810347908284 -0.00956677409514739 -0.009566774095147392 0.002102326780682726 0.0021023267806827266 0.0018257518582520938; 0.0016995333447764542 -0.009600025967880373 -0.009568909038385058 0.00211110519635787 0.002126665404121149 0.0019041225062596512 0.02147000820600843 0.0018919087442672408 0.0018955585096979528 0.001901532105707611 -0.0027326925541940154 -0.009587396689635229 0.0021033365243459364 -0.009587169629864764 0.0020857359127807126 0.0018213320393175429; 0.001694903833909817 -0.009622067653144334 0.0021253512811886806 0.0021161532879501264 -0.009605471751472621 0.001909544402959752 0.001900140629840819 0.0214367979161938 0.0019170753837015333 -0.0027425590851071985 0.0018996780791955168 0.0021123269778729266 -0.009590802837551371 -0.009598153138989835 0.002104551814037816 0.0018218751224071204; 0.0017072834733089894 0.002126356880628416 -0.009586075436835212 0.0021263568806284164 -0.009586075436835212 -0.0027446100416977258 0.0019013410488881832 0.0019054095571303335 0.021459909374802102 0.001905409557130333 0.001901341048888183 0.0020872886878440587 0.0020872886878440587 -0.009572372198892808 -0.009572372198892804 0.0018305696243639195; 0.0016949038339098175 0.002116153287950126 -0.009605471751472621 -0.009622067653144332 0.0021253512811886806 0.0019095444029597517 0.0018996780791955172 -0.002742559085107199 0.0019170753837015337 0.021436797916193795 0.0019001406298408193 -0.00959080283755137 0.0021123269778729275 0.002104551814037816 -0.009598153138989835 0.00182187512240712; 0.0016995333447764535 0.00211110519635787 0.002126665404121149 -0.009600025967880376 -0.00956890903838506 0.0019041225062596508 -0.0027326925541940167 0.0019015321057076107 0.0018955585096979523 0.001891908744267241 0.021470008206008435 0.0021033365243459364 -0.009587396689635229 0.0020857359127807126 -0.00958716962986476 0.001821332039317543; 0.0020872719424654927 0.001970287565504549 0.001996219708745829 0.0019599860815929103 -0.002681875758443128 -0.009573310267125578 -0.009561034740063347 0.0020860552305312367 0.0020704895941663433 -0.009520496400320677 0.0020953004551773568 0.02140203587222249 0.0018303436313866104 0.0018354517103692208 0.001838339102780595 -0.009564928875117727; 0.0020872719424654927 0.0019599860815929103 -0.0026818757584431267 0.0019702875655045493 0.001996219708745829 -0.009573310267125578 0.002095300455177357 -0.009520496400320676 0.002070489594166344 0.002086055230531237 -0.009561034740063343 0.0018303436313866104 0.021402035872222492 0.001838339102780595 0.0018354517103692206 -0.009564928875117727; 0.0020995907538133895 0.001980025270544763 0.001967976625569475 -0.002681765366256679 0.001962456829146359 0.0020966226580444933 -0.009567787991674627 -0.009533105100434598 -0.009544568183542447 0.0020659101922167423 0.00206901907543541 0.0018381015500377677 0.001842925428165938 0.02139405811589677 0.0018400017163720595 -0.009538072538988267; 0.0020995907538133903 -0.002681765366256679 0.0019624568291463592 0.0019800252705447635 0.001967976625569475 0.002096622658044493 0.00206901907543541 0.0020659101922167423 -0.009544568183542445 -0.009533105100434598 -0.009567787991674627 0.0018429254281659387 0.001838101550037767 0.00184000171637206 0.02139405811589677 -0.009538072538988267; -0.002680443863425701 0.0021005954257828675 0.002084860878707707 0.002100595425782868 0.002084860878707707 0.0018329158103440526 0.0018305228640578875 0.0018287276230540093 0.0018564523678181596 0.0018287276230540095 0.0018305228640578869 -0.009570510188862697 -0.009570510188862694 -0.009562465621042758 -0.00956246562104276 0.021557616878660372
    ] ≈ mean(measured[:PC])
    @test [
        0.00022356488563947676 6.130829943150607e-5 5.404800597789658e-5 6.13082994315149e-5 5.404800597789658e-5 4.919902947139136e-5 4.743429436468143e-5 4.189077774368434e-5 5.3183164656739167e-5 4.1890777743684546e-5 4.7434294364681603e-5 3.5089250992939075e-5 3.508925099293932e-5 3.516401727886983e-5 3.516401727887103e-5 6.523051371022991e-5; 5.788048525242318e-5 0.0002218139776610252 4.3902992770859574e-5 4.524596845777489e-5 4.359994410435352e-5 6.165866537050308e-5 5.139256384279352e-5 5.154506357455961e-5 3.2116656396171035e-5 3.471442611279508e-5 3.4239640593101644e-5 4.6073315199302156e-5 4.0648871400365956e-5 4.9528829120141146e-5 6.274393984748282e-5 3.836814105795949e-5; 4.66712023147097e-5 4.4109973776159365e-5 0.00022754256521602571 4.339547467667187e-5 4.810480027673218e-5 3.434061563657539e-5 5.7815799715049134e-5 3.1591402882764405e-5 5.548198080268898e-5 6.403720298969539e-5 3.1439034617429774e-5 4.458065054694482e-5 6.38284926575583e-5 4.538386221630101e-5 4.179756190392525e-5 3.8618533567403715e-5; 5.7880485252418496e-5 4.52459684577747e-5 4.3599944104353717e-5 0.0002218139776610081 4.390299277085948e-5 6.165866537050308e-5 3.4239640593101644e-5 3.4714426112794836e-5 3.2116656396171035e-5 5.154506357455961e-5 5.139256384279088e-5 4.0648871400366166e-5 4.6073315199302156e-5 6.274393984748309e-5 4.9528829120141146e-5 3.836814105795927e-5; 4.667120231470679e-5 4.339547467667187e-5 4.8104800276732265e-5 4.4109973776159656e-5 0.00022754256521603284 3.4340615636574895e-5 3.14390346174295e-5 6.403720298970385e-5 5.548198080268653e-5 3.159140288276333e-5 5.7815799715044445e-5 6.382849265755777e-5 4.458065054694406e-5 4.179756190392505e-5 4.538386221630026e-5 3.861853356740284e-5; 4.911931188226032e-5 6.589982523162361e-5 3.621547869932464e-5 6.589982523163184e-5 3.621547869932464e-5 0.00023126820785650989 4.5857126368902394e-5 4.090974787827455e-5 6.286683058997022e-5 4.0909747878274864e-5 4.585712636890267e-5 5.7843895647817896e-5 5.784389564781087e-5 3.6464730655232784e-5 3.6464730655232784e-5 5.286095277231268e-5; 4.764425599666785e-5 5.818081052549548e-5 7.059345507232811e-5 3.6151181370199336e-5 3.611870916450856e-5 4.753752601796006e-5 0.0002451627471851833 4.691445798963992e-5 4.6151505074508854e-5 4.2561736440643935e-5 6.600189917697938e-5 6.529352147906508e-5 3.621779258955332e-5 5.6751199780528986e-5 3.900868116697751e-5 4.822841885039846e-5; 4.008103029419545e-5 5.6651282847566254e-5 3.599956198763948e-5 3.5139797678341617e-5 7.029535132033634e-5 4.218071823129574e-5 4.618729958271694e-5 0.00022406628769378804 4.0604181621786674e-5 5.904247321139559e-5 4.4332557664480046e-5 3.5771369050518796e-5 6.331875923994266e-5 5.560206540005916e-5 3.794489738789887e-5 3.807167544800431e-5; 5.5964502566523324e-5 3.4931578646870045e-5 6.14102785449206e-5 3.493157864687029e-5 6.141027854492502e-5 6.39888088545955e-5 4.497050709980161e-5 4.029119730563132e-5 0.00024305073275197701 4.029119730563153e-5 4.4970507099801886e-5 3.956970817236959e-5 3.9569708172370016e-5 6.843516421384825e-5 6.843516421384627e-5 4.6241586763707975e-5; 4.008103029419545e-5 3.513979767834113e-5 7.029535132034213e-5 5.6651282847556686e-5 3.599956198763901e-5 4.218071823129624e-5 4.4332557664479667e-5 5.904247321139616e-5 4.060418162178709e-5 0.0002240662876937977 4.6187299582717036e-5 6.331875923994909e-5 3.5771369050519033e-5 3.794489738789976e-5 5.560206540006647e-5 3.807167544800443e-5; 4.7644255996667576e-5 3.6151181370198394e-5 3.611870916450832e-5 5.8180810525504795e-5 7.059345507233387e-5 4.753752601796041e-5 6.600189917698041e-5 4.256173644064364e-5 4.6151505074508854e-5 4.691445798963956e-5 0.00024516274718518774 3.621779258955238e-5 6.529352147905884e-5 3.900868116697795e-5 5.67511997805266e-5 4.822841885039846e-5; 3.401998456450201e-5 4.4992903094146956e-5 4.296387385789503e-5 4.0621116502433476e-5 6.115812104910208e-5 5.840621990918062e-5 6.098320777708233e-5 3.5204727779111766e-5 3.829372014297579e-5 6.340215179541405e-5 3.638744165035938e-5 0.00022543807715983923 4.7617576553095056e-5 4.2420565102183266e-5 4.1465065718721565e-5 5.744385893609011e-5; 3.401998456450176e-5 4.0621116502433056e-5 6.11581210491025e-5 4.4992903094146956e-5 4.296387385789404e-5 5.840621990918526e-5 3.638744165035961e-5 6.340215179541192e-5 3.829372014297579e-5 3.520472777911104e-5 6.098320777707345e-5 4.7617576553095415e-5 0.00022543807715983202 4.146506571872115e-5 4.242056510218357e-5 5.744385893609955e-5; 3.195930998224596e-5 4.9651144192787596e-5 4.536825647062035e-5 6.238817290935015e-5 4.037208209145666e-5 3.7365214890404826e-5 5.261344595381782e-5 5.3202669050723104e-5 6.253811438023987e-5 3.8648308366874814e-5 3.810324190891965e-5 4.573499708875714e-5 4.337638373139269e-5 0.00022112511670856127 4.57038118592817e-5 6.441068796527287e-5; 3.195930998224622e-5 6.238817290935056e-5 4.037208209145624e-5 4.965114419278827e-5 4.536825647062035e-5 3.7365214890405504e-5 3.8103241908919875e-5 3.864830836687547e-5 6.253811438023337e-5 5.320266905070782e-5 5.261344595382555e-5 4.337638373139269e-5 4.5734997088756314e-5 4.5703811859282065e-5 0.00022112511670856373 6.441068796527077e-5; 6.579694455338942e-5 3.9282104251844605e-5 4.2962896061695505e-5 3.928210425184525e-5 4.2962896061695505e-5 5.082985635895271e-5 4.6274447278575964e-5 3.956909185839357e-5 4.670159394102621e-5 3.956909185839368e-5 4.627444727857615e-5 5.7483301727019934e-5 5.748330172702229e-5 6.703077980270947e-5 6.703077980270541e-5 0.00023227107966754915
    ] ≈ std_error(measured[:PC])
end



# TODO
# remove this / make this an example / make this faster
#=


"""
    stat_equal(
        expected_value, actual_values, standard_errors;
        min_error = 0.1^3, order=2, rtol = 0, debug=false
    )

Compare an `expected_value` (i.e. literature value, exact result, ...) to a set
of `actual_values` and `standard_errors` (i.e. calculated from DQMC or MC).

- `order = 2`: Sets the number of σ-intervals included. (This affects the
accuracy of the comaprison and the number of matches required)
- `min_error = 0.1^3`: Sets a lower bound for the standard error. (If one
standard error falls below `min_error`, `min_error` is used instead. This
happens before `order` is multiplied.)
- `rtol = 0`: The relative tolerance passed to `isapprox`.
- `debug = false`: If `debug = true` information on comparisons is always printed.
"""
function stat_equal(
        expected_value, actual_values::Vector, standard_errors::Vector;
        min_error = 0.001, order=2, debug=false, rtol=0.0
    )

    @assert order > 1
    N_matches = floor(length(actual_values) * (1 - 1 / order^2))
    if N_matches == 0
        error("No matches required. Try increasing the sample size or σ-Interval")
    elseif N_matches < 3
        @warn "Only $N_matches out of $(length(actual_values)) are required!"
    end

    is_approx_equal = [
        isapprox(expected_value, val, atol=order * max(min_error, err), rtol=rtol)
        for (val, err) in zip(actual_values, standard_errors)
    ]
    does_match = sum(is_approx_equal) >= N_matches

    if debug || !does_match
        printstyled("────────────────────────────────\n", color = :light_magenta)
        print("stat_equal returned ")
        printstyled("$(does_match)\n\n", color = does_match ? :green : :red)
        print("expected: $expected_value\n")
        print("values:   [")
        for i in eachindex(actual_values)
            if i < length(actual_values)
                printstyled("$(actual_values[i])", color = is_approx_equal[i] ? :green : :red)
                print(", ")
            else
                printstyled("$(actual_values[i])", color = is_approx_equal[i] ? :green : :red)
            end
        end
        print("]\n")
        print("$(order)-σ:      [")
        for i in eachindex(standard_errors)
            if i < length(standard_errors)
                printstyled("$(standard_errors[i])", color = is_approx_equal[i] ? :green : :red)
                print(", ")
            else
                printstyled("$(standard_errors[i])", color = is_approx_equal[i] ? :green : :red)
            end
        end
        print("]\n")
        print("checks:   [")
        for i in eachindex(standard_errors)
            if i < length(standard_errors)
                printstyled("$(is_approx_equal[i])", color = is_approx_equal[i] ? :green : :red)
                print(", ")
            else
                printstyled("$(is_approx_equal[i])", color = is_approx_equal[i] ? :green : :red)
            end
        end
        print("]\n")
        printstyled("────────────────────────────────\n", color = :light_magenta)
    end
    does_match
end



@testset "DQMC: triangular Hubbard model vs dos Santos Paper" begin
    # > Attractive Hubbard model on a triangular lattice
    # dos Santos
    # https://journals.aps.org/prb/abstract/10.1103/PhysRevB.48.3976
    Random.seed!()
    sample_size = 5

    @time for (k, (mu, lit_oc, lit_pc,  beta, L)) in enumerate([
            (-2.0, 0.12, 1.0,  5.0, 4),
            (-1.2, 0.48, 1.50, 5.0, 4),
            ( 0.0, 0.88, 0.95, 5.0, 4),
            ( 1.2, 1.25, 1.55, 5.0, 4),
            ( 2.0, 2.00, 0.0,  5.0, 4)

            # (-2.0, 0.12, 1.0,  8.0, 4),
            # (-1.2, 0.48, 1.82, 8.0, 4),
            # ( 0.0, 0.88, 0.95, 8.0, 4),
            # ( 1.2, 1.25, 1.65, 8.0, 4),
            # ( 2.0, 2.00, 0.0,  8.0, 4),

            # (-2.0, 0.40, 1.0,  5.0, 6),
            # (-1.2, 0.40, 1.05, 5.0, 6),
            # (0.01, 0.80, 1.75, 5.0, 6),
            # ( 1.2, 1.40, 2.0,  5.0, 6),
            # ( 2.0, 2.00, 0.0,  5.0, 6)
        ])
        @info "[$(k)/5] μ = $mu (literature check)"
        m = HubbardModelAttractive(
            dims=2, L=L, l = MonteCarlo.TriangularLattice(L),
            t = 1.0, U = 4.0, mu = mu
        )
        OC_sample = []
        OC_errors = []
        PC_sample = []
        PC_errors = []
        for i in 1:sample_size
            mc = DQMC(
                m, beta=5.0, delta_tau=0.125, safe_mult=8,
                thermalization=2000, sweeps=2000, measure_rate=1,
                measurements = Dict{Symbol, MonteCarlo.AbstractMeasurement}()
            )
            push!(mc, :G => MonteCarlo.GreensMeasurement)
            push!(mc, :PC => MonteCarlo.PairingCorrelationMeasurement)
            run!(mc, verbose=false)
            measured = measurements(mc)

            # mean(measured[:G]) = MC mean
            # diag gets c_i c_i^† terms
            # 2 (1 - mean(c_i c_i^†)) = 2 mean(c_i^† c_i) where 2 follows from 2 spins
            occupation = 2 - 2(measured[:G].obs |> mean |> diag |> mean)
            push!(OC_sample, occupation)
            push!(OC_errors, 2(measured[:G].obs |> std_error |> diag |> mean))
            push!(PC_sample, measured[:PC].uniform_fourier |> mean)
            push!(PC_errors, measured[:PC].uniform_fourier |> std_error)
        end
        # min_error should compensate read-of errors & errors in the results
        # dos Santos used rather few sweeps, which seems to affect PC peaks strongly
        @test stat_equal(lit_oc, OC_sample, OC_errors, min_error=0.025)
        @test stat_equal(lit_pc, PC_sample, PC_errors, min_error=0.05)
    end
end

=#
